View(df.tmp3)
reForm <- function(data){
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc, genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""))
}
tryThis <- apply(data.tmp3, 1, reForm)
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTU.ID","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#
reForm <- function(data){
perc <- data$speciesPerc
genus_species <- data$genus_species
shcode <- data$shcode
eucode <- "EU"
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc, genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""))
}
tryThis <- apply(data.tmp3, 1, reForm)
tryThis <- apply(df.tmp3, 1, reForm)
tryThis <- apply(data.frame(df.tmp3), 1, reForm)
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTU.ID","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#
perc <- data$speciesPerc
perc <- data$speciesPerc
data<-df.tmp3
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc, genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""))
View(data)
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = "|")
View(data)
grep("unidentified", data$phylum)
View(data)
data[4,"class"]
testing<-data[4,"class"]
grepl("unidentified", testing)
grepl("unidentified", data$class)
grepl("unidentified", data)
testing<-data[,"class"]
testing
grepl("unidentified", testing)
grepl("unidentified", testing)
testing[grepl("unidentified", testing)]<- "unidentified"
df.example <- read.table("data/otu_table_example.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current df from RDP output
df.rdpout <- read.table("data/head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
################
# taxonomy cell template
df.example[1,"taxonomy"]
colnames(df.example)
# reformat df.rdpout
#pull out relevant columns and given them column names
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTU.ID","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
i<-1
df.tmp3[,COLS[i]]
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
df.tmp3[,COLS[i]]
i<-3
df.tmp3[,COLS[i]]
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
#find "unidentified"s and replace cell with simple "unidentified"
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
View(df.tmp3)
library(tidyr)
# example df for FUNGuild input
df.example <- read.table("data/otu_table_example.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current df from RDP output
df.rdpout <- read.table("data/head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current otu table
################
# taxonomy cell template
df.example[1,"taxonomy"]
colnames(df.example)
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTU.ID","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
library(tidyr)
# example df for FUNGuild input
df.example <- read.table("data/otu_table_example.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current df from RDP output
df.rdpout <- read.table("data/head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
################
# taxonomy cell template
df.example[1,"taxonomy"]
# reformat df.rdpout
#pull out relevant columns and given them column names
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTU.ID","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#replace columns that include "unidentified with just unidentified"
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#find "unidentified"s and replace cell with simple "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
# pull stuff together and make a 'taxonomy' column
data<-df.tmp3 #call this something generic
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = "|")
data$taxonomy
colnames(data)
ind.tax <- data[,c("OTU.ID","taxonomy")]
df.otub.tax <- merge(df.otutab, ind.tax)
View(df.otub.tax)
View(df.otub.tax)
View(df.otutab)
View(ind.tax)
View(df.otutab)
library(tidyr)
# example df for FUNGuild input
df.example <- read.table("data/otu_table_example.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current df from RDP output
df.rdpout <- read.table("data/head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
################
# taxonomy cell template
df.example[1,"taxonomy"]
################
# reformat df.rdpout
#pull out relevant columns and given them column names
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTUId","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#replace columns that include "unidentified with just unidentified"
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
#find "unidentified"s and replace cell with simple "unidentified"
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
################
# pull stuff together and make a 'taxonomy' column
data<-df.tmp3 #call this something generic
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = "|")
ind.tax <- data[,c("OTUId","taxonomy")]
df.otu.tax <- merge(df.otutab, ind.tax)
View(df.otu.tax)
df.otu.tax[,"taxonomy"]
df.example[1,"taxonomy"]
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste(paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = ";"),
sep = "|")
data[1,"taxonomy"]
library(tidyr)
# example df for FUNGuild input
df.example <- read.table("otu_table_example.txt", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# current df from RDP output
df.rdpout <- read.table("head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
################
# taxonomy cell template
#df.example[1,"taxonomy"]
################
# reformat df.rdpout
#pull out relevant columns and given them column names
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTUId","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#replace columns that include "unidentified with just unidentified"
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
#find "unidentified"s and replace cell with simple "unidentified"
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
################
# pull stuff together and make a 'taxonomy' column
data<-df.tmp3 #call this something generic
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste(paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = ";"),
sep = "|")
#check the format
#data[1,"taxonomy"]
################
# attach the 'taxonomy' column to the otu table
ind.tax <- data[,c("OTUId","taxonomy")]
df.otu.tax <- merge(df.otutab, ind.tax)
write.table(df.otu.tax, file="otuTable_forFUNG.tab", sep = "\t")
library(tidyr)
df.rdpout <- read.table("data/RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
View(df.rdpout)
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTUId","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#replace columns that include "unidentified with just unidentified"
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
#find "unidentified"s and replace cell with simple "unidentified"
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
################
# pull stuff together and make a 'taxonomy' column
data<-df.tmp3 #call this something generic
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$Species
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste(paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = ";"),
sep = "|")
data[1,"taxonomy"]
ind.tax <- data[,c("OTUId","taxonomy")]
df.otu.tax <- merge(df.otutab, ind.tax)
View(df.otu.tax)
write.table(df.otu.tax, file="output/otuTable_forFUNG.tab", sep = "\t")
df.test<-read.table("output/otuTable_forFUNG.tab")
View(df.test)
colnames(df.test) == "taxonomy"
colnames(df.test)[colnames(df.test) == "taxonomy"]
View(iris)
colnames(iris)
mod <- lm(Sepal.Length ~ Sepal.Width, data = iris)
mod
coef(mod)
coef(mod)$intercept
coef(mod)$(intercept)
coef(mod)$"(intercept)"
coef(mod)["(intercept"]
coef(mod)["(Intercept)"]
coef(mod)["Sepal.Width"]
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
library(ggplot2)
ggplot(aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
ggplot(aes(x=Sepal.Length, y=Sepal.Width, data=iris)) + geom_point()
ggplot(aes(x=Sepal.Length, y=Sepal.Width, data=iris)) + geom_point()
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() + geom_abline(intercept=intercept, slope=slope)
mod <- lm(Sepal.Length ~ Sepal.Width, data = iris)
mod <- lm(Sepal.Length ~ Sepal.Width, data = iris)
my.intercept <- coef(mod)["(Intercept)"]
my.slope <- coef(mod)["Sepal.Width"]
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() + geom_abline(intercept=my.intercept, slope=my.slope)
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_abline(intercept=my.intercept, slope=my.slope, color = 2)
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_abline(aes(intercept=my.intercept, slope=my.slope), color = 2)
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_abline(intercept=my.intercept, slope=my.slope, color = 2)
ggplot(data = iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_abline(yintercept=my.intercept, slope=my.slope, color = 2)
p <- ggplot(mtcars, aes(wt, mpg)) + geom_point()
p
coef(lm(mpg ~ wt, data = mtcars))
mod<-lm(mpg ~ wt, data = mtcars)
coef(mod)
coef(mod)[1]
my.int<-coef(mod)[1]
my.slope<-coef(mod)[2]
p + geom_abline(intercept = my.int, slope = my.slope)
# But this is easier to do with geom_smooth:
p + geom_smooth(method = "lm", se = FALSE)
library(tidyr)
df.rdpout <- read.table("data/RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
df.rdpout <- read.table("data/head_RDPUnite.txt", sep = "\t", stringsAsFactors = FALSE)
# current otu table
df.otutab <- read.table("data/otuTable.tab", sep = "\t", header = TRUE, stringsAsFactors = FALSE)
df.tmp <- df.rdpout[, c("V1","V3","V6","V9","V12","V15","V18","V21","V23")]
colnames(df.tmp) <- c("OTUId","kingdom","phylum","class","order","family","genus","genus_species_code","speciesPerc")
#split the column with multiple types of info
View(df.tmp)
df.tmp1 <- separate(data = df.tmp, col = genus_species_code, into = c("genus_species", "shcode"), sep = "\\|")
df.tmp2 <- separate(data = df.tmp1, col = genus_species, into = c("Genus","Species"), sep = "_", extra = "merge")
df.tmp3<-data.frame(df.tmp2, genus_species=df.tmp1$genus_species)
#replace columns that include "unidentified with just unidentified"
i<-0
COLS <- c("kingdom","phylum","class","order","family","Genus","Species")
for (i in 1:length(COLS)){
#pull out the current column
columnThing <- df.tmp3[,COLS[i]]
#find "unidentified"s and replace cell with simple "unidentified"
columnThing[grepl("unidentified", columnThing)] <- "unidentified"
#update the column in the original dataframe
df.tmp3[,COLS[i]] <- columnThing
}
################
# pull stuff together and make a 'taxonomy' column
data<-df.tmp3 #call this something generic
perc <- data$speciesPerc
genus_species <- data$genus_species
eucode <- "EU"
shcode <- data$shcode
repinfo <- "reps"
kingdom <- data$kingdom
phylum <- data$phylum
class <- data$class
order <- data$order
family <- data$family
genus <- data$Genus
species <- data$genus_species
data[,"taxonomy"]<-paste(perc,
genus_species, eucode, shcode, repinfo,
paste(paste("k__",kingdom, sep =""),
paste("p__",phylum, sep =""),
paste("c__",class, sep =""),
paste("o__",order, sep =""),
paste("f__",family, sep =""),
paste("g__",genus, sep =""),
paste("s__",species, " ...", sep =""), sep = ";"),
sep = "|")
data[1,"taxonomy"]
ind.tax <- data[,c("OTUId","taxonomy")]
df.otu.tax <- merge(df.otutab, ind.tax)
View(df.otu.tax)
write.table(df.otu.tax, file="output/otuTable_forFUNG.tab", sep = "\t")
df.test<-read.table("output/otuTable_forFUNG.tab")
View(df.test)
write.table(df.otu.tax, file="output/otuTable_forFUNG.tab", sep = "\t", row.names = FALSE)
write.table(df.otu.tax, file="output/otuTable_forFUNG.tab", sep = "\t", row.names = FALSE)
